{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "testdemoadfv2"
		},
		"integrationRuntime_integrationRuntimeCheckStorageFirewall": {
			"type": "string",
			"metadata": "Integration Runtime Name",
			"defaultValue": "integrationRuntimeCheckStorageFirewall"
		},
		"AzureBlobStorageJohnSinks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageJohnSinks'"
		},
		"AzureBlobStorageLinkedS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageLinkedS'"
		},
		"AzureBlobStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageLinkedService'"
		},
		"AzureBlobStorageSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageSource'"
		},
		"AzureBlobStoragejohn_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragejohn'"
		},
		"AzureBlobStoragesink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragesink'"
		},
		"AzureBlobStoragesinksadsa_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragesinksadsa'"
		},
		"AzureSqlDatabaseLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedService'"
		},
		"AzureSqlDatabaseLinkedServiceADLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedServiceADLS'"
		},
		"AzureSqlDatabaseSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseSource'"
		},
		"AzureSqlDatabaseSourceLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseSourceLinkedService'"
		},
		"AzureStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureStorageLinkedService'"
		},
		"CosmosDbLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbLinkedService'"
		},
		"CosmosDbLinkedService1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbLinkedService1'"
		},
		"CosmosDbMongoDbApi1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbMongoDbApi1'"
		},
		"MongoDbLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'MongoDbLinkedService'"
		},
		"MongoDbNative32_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MongoDbNative32'"
		},
		"AzureBlobJohn_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@{pipeline().parameters.filename}"
		},
		"AzureBlobJohn_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adftutorial"
		},
		"AzureBlobJohnSinkk_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"AzureBlobJohnSinkk_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "test"
		},
		"AzureBlobSink_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "test1"
		},
		"AzureBlobSink_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adftutorial"
		},
		"AzureBlobsourcenew_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "testone.txt"
		},
		"AzureBlobsourcenew_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "source"
		},
		"DestinationDataset_2k0_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": ""
		},
		"DestinationDataset_2k0_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adftutorial"
		},
		"SinkDataset_properties_typeProperties_fileName": {
			"type": "string",
			"defaultValue": "@CONCAT('Incremental-', pipeline().RunId, '.txt')"
		},
		"SinkDataset_properties_typeProperties_folderPath": {
			"type": "string",
			"defaultValue": "adftutorial"
		},
		"MongoDbLinkedService_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "testmongopg"
		},
		"PraveenTrigger_properties_pipeline1_parameters_filename": {
			"type": "string",
			"defaultValue": "@if(equals(int(formatDateTime(utcnow(), 'MM')),01), sub(int(formatDateTime(utcnow(), 'yyyyMM')),89),sub(int(formatDateTime(utcnow(),'yyyyMM')),1))"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_2k0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_2k0",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source/testone.txt"
							},
							{
								"name": "Destination",
								"value": "adftutorial/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink",
								"copyBehavior": "PreserveHierarchy"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureBlobsourcenew",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_2k0",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"ID": "Prop_0",
									"FirstName": "Prop_1"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobsourcenew",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobsourcenew')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_2k0')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'dbo].[sp_write_watermark]')]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseLinkedService",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "AzureBlobJohn",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobJohnSinkk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"filename": {
						"type": "String",
						"defaultValue": "201806"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureBlobJohn')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobJohnSinkk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobJohn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragejohn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					},
					{
						"name": "Prop_2",
						"type": "String"
					}
				],
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('AzureBlobJohn_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('AzureBlobJohn_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragejohn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobJohnSinkk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageJohnSinks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobJohnSinkk_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobJohnSinkk_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageJohnSinks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "JsonFormat",
						"filePattern": "setOfObjects",
						"jsonPathDefinition": {
							"_id": "$.['_id']",
							"user___type": "$.['user___type']",
							"user_className": "$.['user_className']",
							"user_objectId": "$.['user_objectId']",
							"isProcessed": "$.['isProcessed']",
							"departureLoc_latitude": "$.['departureLoc_latitude']",
							"departureLoc___type": "$.['departureLoc___type']",
							"departureLoc_longitude": "$.['departureLoc_longitude']",
							"syncCounter": "$.['syncCounter']",
							"arrivalLoc_latitude": "$.['arrivalLoc_latitude']",
							"arrivalLoc___type": "$.['arrivalLoc___type']",
							"arrivalLoc_longitude": "$.['arrivalLoc_longitude']",
							"departureTimestamp_iso": "$.['departureTimestamp_iso']",
							"departureTimestamp___type": "$.['departureTimestamp___type']",
							"timestamp_iso": "$.['timestamp_iso']",
							"timestamp___type": "$.['timestamp___type']",
							"appVersion": "$.['appVersion']",
							"deviceId": "$.['deviceId']",
							"timeZoneDiffInHours": "$.['timeZoneDiffInHours']",
							"requestToken": "$.['requestToken']",
							"metadata_countryCode": "$.['metadata_countryCode']",
							"metadata_providerVersion": "$.['metadata_providerVersion']",
							"metadata_wifi": "$.['metadata_wifi']",
							"metadata_AppVersion": "$.['metadata_AppVersion']",
							"metadata_cell": "$.['metadata_cell']",
							"metadata_version": "$.['metadata_version']",
							"metadata_osNameVersion": "$.['metadata_osNameVersion']",
							"metadata_carrierName": "$.['metadata_carrierName']",
							"metadata_provider": "$.['metadata_provider']",
							"createdAt": "$.['createdAt']",
							"updatedAt": "$.['updatedAt']",
							"debug_linear_distance": "$.['debug_linear_distance']",
							"debug_linear_waypoints": "$.['debug_linear_waypoints']",
							"debug_analytics_device_type": "$.['debug_analytics_device_type']",
							"debug_analytics_carrier_name": "$.['debug_analytics_carrier_name']",
							"debug_analytics_country_code": "$.['debug_analytics_country_code']",
							"debug_analytics_os_version": "$.['debug_analytics_os_version']",
							"debug_analytics_app_version": "$.['debug_analytics_app_version']",
							"debug_analytics_duration": "$.['debug_analytics_duration']",
							"debug_analytics_document_size": "$.['debug_analytics_document_size']",
							"debug_analytics_num_waypoints": "$.['debug_analytics_num_waypoints']",
							"debug_analytics_depart_to_first_waypoint_dist": "$.['debug_analytics_depart_to_first_waypoint_dist']",
							"debug_analytics_device_arrival_to_td_upload": "$.['debug_analytics_device_arrival_to_td_upload']",
							"debug_analytics_bluetooth_unique_count": "$.['debug_analytics_bluetooth_unique_count']",
							"debug_analytics_bluetooth_connected_duration_ratio": "$.['debug_analytics_bluetooth_connected_duration_ratio']",
							"debug_analytics_linear_distance": "$.['debug_analytics_linear_distance']",
							"debug_analytics_battery_charging": "$.['debug_analytics_battery_charging']",
							"debug_analytics_battery_drain_rate": "$.['debug_analytics_battery_drain_rate']",
							"debug_analytics_arrival_region": "$.['debug_analytics_arrival_region']",
							"debug_analytics_arrival_distance_to_urban_center": "$.['debug_analytics_arrival_distance_to_urban_center']",
							"debug_analytics_departure_region": "$.['debug_analytics_departure_region']",
							"debug_analytics_departure_distance_to_urban_center": "$.['debug_analytics_departure_distance_to_urban_center']",
							"debug_analytics_motion_ratio_stationary": "$.['debug_analytics_motion_ratio_stationary']",
							"debug_analytics_motion_ratio_walking": "$.['debug_analytics_motion_ratio_walking']",
							"debug_analytics_motion_ratio_driving": "$.['debug_analytics_motion_ratio_driving']",
							"debug_analytics_motion_ratio_no_data": "$.['debug_analytics_motion_ratio_no_data']",
							"debug_analytics_motion_ratio_rotation": "$.['debug_analytics_motion_ratio_rotation']",
							"debug_analytics_waypoint_accuracy_ratio_gps": "$.['debug_analytics_waypoint_accuracy_ratio_gps']",
							"debug_analytics_waypoint_accuracy_ratio_wifi": "$.['debug_analytics_waypoint_accuracy_ratio_wifi']",
							"debug_analytics_waypoint_accuracy_ratio_cell": "$.['debug_analytics_waypoint_accuracy_ratio_cell']",
							"debug_analytics_drive_status": "$.['debug_analytics_drive_status']",
							"debug_analytics_is_drive": "$.['debug_analytics_is_drive']",
							"debug_analytics_env": "$.['debug_analytics_env']",
							"id": "$.['id']"
						}
					},
					"fileName": "[parameters('AzureBlobSink_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobSink_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobsourcenew')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": "[parameters('AzureBlobsourcenew_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('AzureBlobsourcenew_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseSource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "ID",
						"type": "Int32"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[emp]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbApiCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbMongoDbApi1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"typeProperties": {
					"collection": "NewCollection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbMongoDbApi1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_2k0')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStoragesink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"structure": [
					{
						"name": "Prop_0",
						"type": "String"
					},
					{
						"name": "Prop_1",
						"type": "String"
					}
				],
				"typeProperties": {
					"fileName": "[parameters('DestinationDataset_2k0_properties_typeProperties_fileName')]",
					"folderPath": "[parameters('DestinationDataset_2k0_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStoragesink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DocumentDbCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbLinkedService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DocumentDbCollection",
				"typeProperties": {
					"collectionName": "CollectionNew"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbLinkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbCollection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbCollection",
				"typeProperties": {
					"collectionName": "\"NewCollection\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbV2Collection1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbNative32",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"typeProperties": {
					"collection": "NewCollection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbNative32')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbV2Collection2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDbNative32",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"typeProperties": {
					"collection": "NewCollection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDbNative32')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureBlob",
				"typeProperties": {
					"format": {
						"type": "TextFormat",
						"columnDelimiter": ",",
						"rowDelimiter": "",
						"nullValue": "\\N",
						"treatEmptyAsNull": true,
						"skipLineCount": 0,
						"firstRowAsHeader": false
					},
					"fileName": {
						"value": "[parameters('SinkDataset_properties_typeProperties_fileName')]",
						"type": "Expression"
					},
					"folderPath": "[parameters('SinkDataset_properties_typeProperties_folderPath')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[data_source_table]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": "[concat('[', 'dbo].[watermarktable]')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageJohnSinks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageJohnSinks_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageLinkedS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageLinkedS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragejohn')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragejohn_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragesink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragesink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragesinksadsa')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragesinksadsa_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedServiceADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedServiceADLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseSourceLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseSourceLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbLinkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbLinkedService1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbApi1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('CosmosDbMongoDbApi1_connectionString')]"
					},
					"database": "DatabaseNew"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDb",
				"typeProperties": {
					"server": "testmongopg.documents.azure.com",
					"port": "10255",
					"databaseName": "DatabaseNew",
					"authenticationType": "Basic",
					"username": "[parameters('MongoDbLinkedService_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('MongoDbLinkedService_password')]"
					},
					"authSource": "admin",
					"enableSsl": true,
					"allowSelfSignedServerCert": true
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDbNative32')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbV2",
				"typeProperties": {
					"connectionString": "[parameters('MongoDbNative32_connectionString')]",
					"database": "DatabaseNew"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PraveenTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {
							"filename": "[parameters('PraveenTrigger_properties_pipeline1_parameters_filename')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2018-10-10T17:30:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								40
							],
							"hours": [
								17
							],
							"monthDays": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerDaniel')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2018-09-19T12:59:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/', parameters('integrationRuntime_integrationRuntimeCheckStorageFirewall'))]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}